@startuml
!include KeypleCore-Api-ClassDiag-PlantUmlSetting.iuml
hide empty description

state "SE observation <b>disabled</b>" as SE_ObservationDisabled {
  [*] --[#Black]> WaitForObserver
  WaitForObserver -right[#Blue]-> WaitForStartDetection : \naddObserver(ReaderObserver)
'  WaitForObserver -right[#Blue]-> WaitForStartDetection [ dir=backward, xlabel= "addObserver(ReaderObserver)"]
  '1:ne -> 0:se [ dir=backward, xlabel= "  (0, -1)  "];
  WaitForObserver : number of observer == 0
  WaitForStartDetection -left[#Blue]-> WaitForObserver : removeObserver(ReaderObserver)\n&& (nb observer == 0)
  WaitForStartDetection : number of observer > 0
}

state "SE observation <b>activated</b>" as SE_ObservationActivated {
  SE_ObservationActivated : number of observer > 0  &&  PollingMode defined
  WaitForSeInsertion -down[#Red]-> WaitForSeProcessing : notifies 'SE matched'\n|| \n'SE inserted' &&\n(NotificationMode == always)\n\n
  WaitForSeInsertion -down[#Red]-> WaitForSeRemoval : 'SE inserted' not notified &&\n((NotificationMode == match_only)\n&& selection failed)
  WaitForSeRemoval -up[#Red]-> WaitForSeInsertion : notifies 'SE removed' &&\n(PollingMode == Repeating)
  WaitForSeProcessing -up[#Red,dashed]-> WaitForSeInsertion : notifies 'SE removed' &&\n(Observable Reader\nwith the capability\nto detect the removal\nat any time)

  WaitForSeProcessing -right[#Blue]-> WaitForSeRemoval : finalizeSeProcessing()\n|| \n'SE channel release requested'
}

WaitForStartDetection -down[#Blue]-> WaitForSeInsertion : startSeDetection(PollingMode)
SE_ObservationActivated -up[#Blue]-> WaitForObserver : removeObserver(ReaderObserver)\n&& (nb observer == 0)
SE_ObservationActivated -up[#Blue]-> WaitForStartDetection : stopSeDetection()

SE_ObservationActivated -up[#Blue]-> SE_ObservationActivated : removeObserver(ReaderObserver)\n&& (nb observer > 0)

WaitForSeRemoval -left[#Red]-> WaitForStartDetection : notifies 'SE removed' &&\n(PollingMode == SingleShot)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
@enduml